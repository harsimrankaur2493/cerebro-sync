import { apiSlice } from "../apiSlice";

const TASKS_URL = "/tasks"; // Corrected the URL to match the plural 'tasks'

// Define the taskApiSlice with the required endpoints
export const taskApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    // Fetch dashboard statistics
    getDashboardStats: builder.query({
      query: () => ({
        url: `${TASKS_URL}/dashboard`, // Endpoint to fetch dashboard stats
        method: "GET",
        credentials: "include",
      }),
    }),

    // Fetch all tasks with optional filters (stage, isTrashed, search)
    getAllTasks: builder.query({
      query: ({ strQuery, isTrashed, search }) => ({
        url: `${TASKS_URL}?stage=${strQuery}&isTrashed=${isTrashed}&search=${search}`,
        method: "GET",
        credentials: "include",
      }),
    }),

    // Create a new task
    createTask: builder.mutation({
      query: (data) => ({
        url: `${TASKS_URL}/create`, // Endpoint to create a task
        method: "POST",
        body: data,
        credentials: "include",
      }),
    }),

    // Duplicate an existing task
    duplicateTask: builder.mutation({
      query: (id) => ({
        url: `${TASKS_URL}/duplicate/${id}`, // Endpoint to duplicate a task
        method: "POST",
        body: {}, // No body needed for duplication
        credentials: "include",
      }),
    }),

    // Update an existing task
    updateTask: builder.mutation({
      query: (data) => ({
        url: `${TASKS_URL}/update/${data._id}`, // Endpoint to update task by ID
        method: "PUT",
        body: data,
        credentials: "include",
      }),
    }),

    trashTask: builder.mutation({
        query: ({id})=>({
            url: `${TASKS_URL}/${id}`,
            method: "PUT",
            credentials: "include"
        })
    }),

    createSubTask: builder.mutation({
      query: ({data, id})=>({
        url: `${TASKS_URL}/create-subtask/${id}`,
        method: "PUT",
        body: data,
        credentials: "include",
      })
    }),

    getSingleTask: builder.query({
      query: (id)=>({
        url: `${TASKS_URL}/${id}`,
        method:"GET",
        credentials: "include",
      })
    }),

    postTaskActivity: builder.mutation({
      query: ({data, id})=>({
        url: `${TASKS_URL}/activity/${id}`,
        method: "POST",
        body: data,
        credentials: "include"

      })
    }),

    deleteRestoreTask: builder.mutation({
      query: ({id, actionType})=>({
        url: `${TASKS_URL}/delete-restore/${id}?actionType=${actionType}`,
        method:"DELETE",
        credentials:"include",
      })
    })
  }),
});

// Export the hooks generated by the slice for use in your components
export const {
  useGetDashboardStatsQuery,
  useGetAllTasksQuery,
  useCreateTaskMutation,
  useDuplicateTaskMutation,
  useUpdateTaskMutation,
  useTrashTaskMutation,
  useCreateSubTaskMutation,
  useGetSingleTaskQuery,
  usePostTaskActivityMutation,
  useDeleteRestoreTaskMutation
} = taskApiSlice;
